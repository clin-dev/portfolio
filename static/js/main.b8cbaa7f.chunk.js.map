{"version":3,"sources":["components/home.js","components/aboutme.js","components/resume.js","components/contact.js","components/projects.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","delay","textList","Component","Aboutme","Resume","Contact","Projects","Main","exact","path","component","App","hideToggle","document","querySelector","MaterialLayout","toggleDrawer","style","height","position","fontFamily","to","onClick","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sPAkBeA,E,iLAZX,OACE,6BACE,kBAAC,IAAD,CACEC,UAAU,iBACVC,MAAO,IACPC,SAAU,CAAC,gBAAiB,aAAc,oB,GAPjCC,aCQJC,E,iLARX,OACE,6BACE,+C,GAJcD,aCUPE,E,iLARX,OACE,6BACE,4C,GAJaF,aCUNG,E,iLARX,OACE,6BACE,mD,GAJcH,aCUPI,E,iLARX,OACE,6BACE,+C,GAJeJ,a,QCkBRK,EAXF,kBACX,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWZ,IACjC,kBAAC,IAAD,CAAOW,KAAK,QAAQC,UAAWZ,IAC/B,kBAAC,IAAD,CAAOW,KAAK,WAAWC,UAAWP,IAClC,kBAAC,IAAD,CAAOM,KAAK,UAAUC,UAAWN,IACjC,kBAAC,IAAD,CAAOK,KAAK,WAAWC,UAAWL,IAClC,kBAAC,IAAD,CAAOI,KAAK,YAAYC,UAAWJ,M,QC4BxBK,MAtCf,WACE,SAASC,IACUC,SAASC,cAAc,eAC7BC,eAAeC,eAG5B,OACE,yBAAKC,MAAO,CAAEC,OAAQ,SAAUC,SAAU,aACxC,kBAAC,SAAD,KACE,kBAAC,SAAD,MACA,kBAAC,SAAD,CAAQF,MAAO,CAAEG,WAAY,cAC3B,kBAAC,aAAD,KACE,kBAAC,IAAD,CAAMC,GAAG,QAAQC,QAASV,GAA1B,QAGA,kBAAC,IAAD,CAAMS,GAAG,WAAWC,QAASV,GAA7B,YAGA,kBAAC,IAAD,CAAMS,GAAG,UAAUC,QAASV,GAA5B,UAGA,kBAAC,IAAD,CAAMS,GAAG,YAAYC,QAASV,GAA9B,YAGA,kBAAC,IAAD,CAAMS,GAAG,WAAWC,QAASV,GAA7B,aAKJ,kBAAC,UAAD,KACE,yBAAKb,UAAU,iBACf,kBAAC,EAAD,UCzBUwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,cCTNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFhB,SAASiB,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b8cbaa7f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./css/home.css\";\nimport CypherText from \"react-cypher-text-loop\";\n\nclass Home extends Component {\n  render() {\n    return (\n      <div>\n        <CypherText\n          className=\"transitionText\"\n          delay={2000}\n          textList={[\"Goal Oriented\", \"Optimistic\", \"Confident\"]}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\n\nclass Aboutme extends Component {\n  render() {\n    return (\n      <div>\n        <h1> About Me </h1>\n      </div>\n    );\n  }\n}\n\nexport default Aboutme;\n","import React, { Component } from \"react\";\n\nclass Resume extends Component {\n  render() {\n    return (\n      <div>\n        <h1> Resume</h1>\n      </div>\n    );\n  }\n}\n\nexport default Resume;\n","import React, { Component } from \"react\";\n\nclass Contact extends Component {\n  render() {\n    return (\n      <div>\n        <h1> Contact Page </h1>\n      </div>\n    );\n  }\n}\n\nexport default Contact;\n","import React, { Component } from \"react\";\n\nclass Projects extends Component {\n  render() {\n    return (\n      <div>\n        <h1> Projects </h1>\n      </div>\n    );\n  }\n}\n\nexport default Projects;\n","import React from \"react\";\nimport Home from \"./home\";\nimport Aboutme from \"./aboutme\";\nimport Resume from \"./resume\";\nimport Contact from \"./contact\";\nimport Projects from \"./projects\";\n\nimport { Switch, Route } from \"react-router-dom\";\n\nconst Main = () => (\n  <Switch>\n    <Route exact path=\"/\" component={Home} />\n    <Route path=\"/home\" component={Home} />\n    <Route path=\"/aboutme\" component={Aboutme} />\n    <Route path=\"/resume\" component={Resume} />\n    <Route path=\"/contact\" component={Contact} />\n    <Route path=\"/projects\" component={Projects} />\n  </Switch>\n);\n\nexport default Main;\n","import React from \"react\";\nimport \"./App.css\";\nimport { Layout, Navigation, Header, Drawer, Content } from \"react-mdl\";\nimport Main from \"./components/main\";\nimport { Link } from \"react-router-dom\";\n\nfunction App() {\n  function hideToggle() {\n    var selectorId = document.querySelector(\".mdl-layout\");\n    selectorId.MaterialLayout.toggleDrawer();\n  }\n\n  return (\n    <div style={{ height: \"1000px\", position: \"relative\" }}>\n      <Layout>\n        <Header></Header>\n        <Drawer style={{ fontFamily: \"monospace\" }}>\n          <Navigation>\n            <Link to=\"/home\" onClick={hideToggle}>\n              Home\n            </Link>\n            <Link to=\"/aboutme\" onClick={hideToggle}>\n              About Me\n            </Link>\n            <Link to=\"/resume\" onClick={hideToggle}>\n              Resume\n            </Link>\n            <Link to=\"/projects\" onClick={hideToggle}>\n              Projects\n            </Link>\n            <Link to=\"/contact\" onClick={hideToggle}>\n              contact\n            </Link>\n          </Navigation>\n        </Drawer>\n        <Content>\n          <div className=\"page-content\"></div>\n          <Main />\n        </Content>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"react-mdl/extra/material.css\";\nimport \"react-mdl/extra/material.js\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}